package com.rondaful.cloud.seller.common.task;

import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.DateUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.alibaba.fastjson.JSON;
import com.rondaful.cloud.common.utils.RedissLockUtil;
import com.rondaful.cloud.seller.common.mws.intface.GetFeedSubmissionListResultReport;
import com.rondaful.cloud.seller.common.mws.intface.SubmitFeed;
import com.rondaful.cloud.seller.common.spring.ApplicationContextProvider;
import com.rondaful.cloud.seller.constants.AmazonConstants;
import com.rondaful.cloud.seller.entity.AmazonPublishListing;
import com.rondaful.cloud.seller.entity.AmazonPublishSubListing;
import com.rondaful.cloud.seller.entity.Empower;
import com.rondaful.cloud.seller.entity.SellerSkuMap;
import com.rondaful.cloud.seller.entity.amazon.AmazonPublishListStatus;
import com.rondaful.cloud.seller.entity.amazon.AmazonRequestProduct;
import com.rondaful.cloud.common.constant.marketplace.MarketplaceId;
import com.rondaful.cloud.common.constant.marketplace.MarketplaceIdList;
import com.rondaful.cloud.seller.remote.RemoteOrderRuleService;
import com.rondaful.cloud.seller.service.AmazonPublishListingService;
import com.rondaful.cloud.seller.service.AmazonPublishSubListingService;
import com.rondaful.cloud.seller.service.AuthorizationSellerService;

@Deprecated
@Component
//@EnableScheduling
public class GetFeedSubmissionResultScheduler {

	private final Logger logger = LoggerFactory.getLogger(GetFeedSubmissionResultScheduler.class);
	
	private final String lockKey = "redis_lock_key_GetFeedSubmissionResultScheduler1";
	
	@Autowired
	RedissLockUtil redissLockUtil;
	
	@Autowired
	RemoteOrderRuleService remoteOrderRuleService;
	
	//@Scheduled(initialDelay=60, fixedRate=330000 )//第一次延迟1秒后执行，之后按fixedRate的规则每5.5分钟执行一次。
	private void process(){
		
		if(!redissLockUtil.tryLock(lockKey, 10, 300)) //等待10秒，5分放开锁
		{
			logger.debug("其它服务正在执行。lock....");
			return ;
		}
		logger.debug("GetFeedSubmissionResultScheduler 检查报告开始..");
		try
		{
			
			AmazonPublishSubListingService amazonPublishsubListingService  = (AmazonPublishSubListingService) ApplicationContextProvider.getBean("amazonPublishSubListingServiceImpl");
			AmazonPublishListingService amazonPublishListingService  = (AmazonPublishListingService) ApplicationContextProvider.getBean("amazonPublishListingServiceImpl");
			AuthorizationSellerService authorizationSellerService  = (AuthorizationSellerService) ApplicationContextProvider.getApplicationContext().getBean("authorizationSellerServiceImpl");
			//RemoteOrderRuleService remoteOrderRuleService  = (RemoteOrderRuleService) ApplicationContextProvider.getApplicationContext().getBean("remoteOrderRuleService.RemoteOrderRuleServiceImpl");
			
			SubmitFeed submitFeed = (SubmitFeed) ApplicationContextProvider.getBean("submitFeed");
			// 取出主数据(刊登中的数据)
			AmazonPublishListing mainQuery = new AmazonPublishListing();
			mainQuery.setPublishStatus(AmazonPublishListStatus.AMAZON_PUBLISH_STATUS_PUBLISHING); // 刊登状态 1: 草稿  2: 刊登中 3: 在线 4: 刊登失败 5: 已下线 6:等待
			mainQuery = amazonPublishListingService.selectOne(mainQuery);
			if(mainQuery == null)
			{
				logger.debug("GetFeedSubmissionResultScheduler amazon 暂无可刊登的数据(main)");
				return;
			}
			
			AmazonRequestProduct requestProduct = JSON.parseObject(mainQuery.getPublishMessage(), AmazonRequestProduct.class);
			
			// 找出已生成好的数据
			AmazonPublishSubListing subQuery = new AmazonPublishSubListing();
			subQuery.setListingId(mainQuery.getId());
			List<AmazonPublishSubListing> subList = amazonPublishsubListingService.selectPage(subQuery);
			if(CollectionUtils.isEmpty(subList)){
				logger.debug("GetFeedSubmissionResultScheduler amazon 暂无可刊登的数据(sub)");
				AmazonPublishListing mainUpdateObj = new AmazonPublishListing();
				mainUpdateObj.setId(mainQuery.getId());
				mainUpdateObj.setUpdateTime(new Date());
				mainUpdateObj.setPublishStatus(AmazonPublishListStatus.AMAZON_PUBLISH_STATUS_FAIL);
				amazonPublishListingService.updateByPrimaryKeySelective(mainUpdateObj);
				redissLockUtil.unlock(lockKey); // 解放锁
				process();
				return;
			}
			
			logger.debug("GetFeedSubmissionResultScheduler 本次检查报告数量：{}条记录",subList.size());
		
			for(int i = 0; i < subList.size(); i++)//for(AmazonPublishSubListing subRow : subList)
			{
				AmazonPublishSubListing subRow = subList.get(i);
				logger.debug("准备获取第{}条记录的报告",i+1);
				// 如果不是处理中的数据
				if(subRow.getCompleteStatus() != AmazonConstants.COMPLETE_STATUS_PRESSING) 
				{
					logger.debug("第{}第记录不是 刊登中3，获取记录被跳过.");
					continue;
				}
				
				//error1: GetFeedSubmissionListResultReport.java:104 -异常类型：Sender，异常错误：MissingParameter ，异常原因：The request must contain the parameter FeedSubmissionId.
				logger.debug("第{}条记录开始获取报告",i+1);
				String errorMsg = new GetFeedSubmissionListResultReport().invoke(mainQuery.getPublishSite(), 
						requestProduct.getMerchantIdentifier(), subRow.getSubmitfeedId(), subRow.getMsgType(),mainQuery.getAmwToken());
				logger.debug("errorMsg={}",errorMsg);
				if(AmazonConstants.RESPORT_RESULT_REQUESTTHROTTLED.equals(errorMsg)
						|| AmazonConstants.RESPORT_RESULT_UPLOADING.equals(errorMsg)) // 被扼杀掉的，如果被扼杀了，那就等一下桶漏。
				{
					logger.debug("暂停2分钟再执行下一条，原因：请求被扼杀掉或错误  systemtime:{}",System.currentTimeMillis());
					Thread.currentThread().sleep(120000); // 2分钟，漏桶算法
					continue;
				}
				
				if(StringUtils.isEmpty(errorMsg))
				{
					logger.debug("第{}条记录获取报告失败，准备重次",i+1);
					int networkErrorCount = 0;
					/*while(networkErrorCount < 3)
					{
						logger.debug("第{}条记录获取报告失败，准备重次第{}次",i+1,networkErrorCount);
						networkErrorCount++;
						errorMsg = new GetFeedSubmissionListResultReport().invoke(mainQuery.getPublishSite(), 
									requestProduct.getMerchantIdentifier(), subRow.getSubmitfeedId(), subRow.getMsgType(),mainQuery.getAmwToken());
						if(StringUtils.isNotBlank(errorMsg))
						{
							logger.error("网络异常，正在尝试：{}次，放弃当前记录" , networkErrorCount);
							break;
						}
					}*/
					continue;
				}
				logger.debug("获取报告结果：{}",errorMsg);
				
				Integer resultStatus = getCompleteStatus(errorMsg);
				
				// 刊登中(如果拿不以结果就等下一次调用)
				if(resultStatus == AmazonConstants.COMPLETE_STATUS_PRESSING){
					logger.debug("获取{}条记录时，无法正常获取，数据id:{}",i+1,subRow.getId());
					continue;
				}
				// 刊登失败
				/*if(resultStatus == AmazonConstants.COMPLETE_STATUS_FAILED){
					logger.debug("发现一条数据刊登有错误: 错误id:{}",subRow.getId());
					isAllFlag = Boolean.FALSE;
				}*/
				subRow.setResultMessage(errorMsg);
				subRow.setCompleteStatus(resultStatus);
				subRow.setProcessStatus(AmazonConstants.RESPORT_RESULT_COMPLETE);
				subRow.setCurrInterface("GetFeedSubmissionResult");
				subRow.setUpdateTime(new Date());
				amazonPublishsubListingService.update(subRow);
				logger.debug("获取报告结果完成并更新CompleteStatus状态为：{}，ProcessStatus：{}",resultStatus,resultStatus);
				if( subList.size() - 1  > i) //最后一个不需要暂停
				{
					logger.debug("暂定2分钟再执行下一条，systemtime:{}",System.currentTimeMillis());
					Thread.currentThread().sleep(120000); // 2分钟，漏桶算法
					logger.debug("2分钟已过，开始执行下一条，systemtime:{}",System.currentTimeMillis());
				}
			}
			
			Boolean isAllFlag = Boolean.FALSE;
			int isAllwaitCount = 0;
			AmazonPublishSubListing subQueryTemp = new AmazonPublishSubListing();
			subQueryTemp.setListingId(mainQuery.getId());
			List<AmazonPublishSubListing> subListTemp = amazonPublishsubListingService.selectPage(subQueryTemp);
			for(AmazonPublishSubListing row : subListTemp)
			{
				logger.debug("row.getCompleteStatus()={}",row.getCompleteStatus());
				// 如果有失败的标记一下, 任何一个子上报数据失败都是失败
				if(AmazonConstants.COMPLETE_STATUS_FAILED == row.getCompleteStatus()) {
					logger.debug("GetFeedSubmissionResultScheduler 发现一条数据刊登有错误: 错误id:{}",row.getId());
					isAllFlag = Boolean.TRUE;
					break;
				}
				if(AmazonConstants.COMPLETE_STATUS_PRESSING == row.getCompleteStatus() || 
						AmazonConstants.COMPLETE_STATUS_AWAIT == row.getCompleteStatus())
				{
					isAllwaitCount++;
				}
			}
			
			
			logger.debug("isAllFlag={},isAllwaitCount={}",isAllFlag,isAllwaitCount);
			AmazonPublishListing updateObj = new AmazonPublishListing();
			updateObj.setId(mainQuery.getId());
			if(isAllFlag)
			{
				// 更新状态
				logger.debug("更新主数据的错误状态为4,id:{}",mainQuery.getId());
				updateObj.setPublishStatus(AmazonPublishListStatus.AMAZON_PUBLISH_STATUS_FAIL); // 失败
				amazonPublishListingService.updateByPrimaryKeySelective(updateObj);
			}else {
				
				
				if(isAllwaitCount == 0)
				{
					// 更新状态
					updateObj.setPublishStatus(AmazonPublishListStatus.AMAZON_PUBLISH_STATUS_ONLINE); // 在线
					logger.debug("更新主数据的在线状态为3,id:{}",mainQuery.getId());
					amazonPublishListingService.updateByPrimaryKeySelective(updateObj);
				}
				sendOrderSkuMaps(authorizationSellerService,
						remoteOrderRuleService,requestProduct);
			}
			
			logger.debug("GetFeedSubmissionResultScheduler 检查报告结束..");
		}catch(Exception e)
		{
			logger.error("获取上报结果异常", e);
		}
		finally
		{
			logger.debug("释放报告同步锁...");
			redissLockUtil.unlock(lockKey); // 解放锁
		}
    }
	
	
	private void sendOrderSkuMaps(
			AuthorizationSellerService authorizationSellerService,
			RemoteOrderRuleService remoteOrderRuleService,
			AmazonRequestProduct requestProduct)
	{
		try
		{
			
			String marketplaceId = requestProduct.getCountryCode();
			MarketplaceId marketplaceIdObj = MarketplaceIdList.createMarketplaceForKeyId().get(
					requestProduct.getCountryCode());
			requestProduct.setCountryCode(marketplaceIdObj.getCountryCode());
			Empower empower = new Empower();
			empower.setStatus(1);
			// empower.setAccount(UserSession.getUserBaseUserInfo().getUsername());
			empower.setWebName(marketplaceIdObj.getMarketplaceId());
			empower.setThirdPartyName(requestProduct.getMerchantIdentifier());
			empower.setPlatform(2);
			empower = authorizationSellerService.selectAmazonAccount(empower);
			if(empower == null)
			{
				logger.error("刊登成功后将即将绑定平台sku,但找不到授权数据。");
				return ;
			}
			 List<SellerSkuMap> map = new  ArrayList<SellerSkuMap>();
			 
			 SellerSkuMap sku = new SellerSkuMap();
			 sku.setAuthorizationId(String.valueOf(empower.getEmpowerId()));
			 sku.setPlatform("amazon");
			 sku.setPlatformSku(requestProduct.getSku());
			 sku.setPlSku(requestProduct.getPlSku());
			 sku.setStatus(1);
			 map.add(sku);
			 List<AmazonRequestProduct> subProduct = requestProduct.getVarRequestProductList();
			 for(AmazonRequestProduct sub : subProduct)
			 {
				 SellerSkuMap tempsku = new SellerSkuMap();
				 tempsku.setAuthorizationId(String.valueOf(empower.getEmpowerId()));
				 tempsku.setPlatform("amazon");
				 tempsku.setPlatformSku(sub.getSku());
				 tempsku.setPlSku(sub.getPlSku());
				 tempsku.setStatus(1);
				 map.add(sku);
			 }
			 
			 logger.debug("开始调用addSkuMaps子系统接口");
			String remResult = remoteOrderRuleService.addSkuMaps(map);
			logger.debug("调用addSkuMaps子系统接口结束，返回结果：{}，loadClass={}",remResult,remoteOrderRuleService.getClass());
		}catch(Exception e)
		{
			logger.error("刊登成功后将即将绑定平台sku发现系统错误。",e);
		}
	}
	private Integer getCompleteStatus(String str)
	{
		if(str.equals(AmazonConstants.RESPORT_RESULT_SUCCESS))
		{
			return AmazonConstants.COMPLETE_STATUS_COMPLETE;
		}else if(str.equals(AmazonConstants.RESPORT_RESULT_UPLOADING) || 
				str.equals(AmazonConstants.RESPORT_RESULT_REQUESTTHROTTLED))
		{
			return AmazonConstants.COMPLETE_STATUS_PRESSING;
		}else
		{
			return AmazonConstants.COMPLETE_STATUS_FAILED;
		}
	}
}
