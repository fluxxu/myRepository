package com.rondaful.cloud.seller.common.task;

import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.fastjson.JSON;
import com.rondaful.cloud.common.exception.GlobalException;
import com.rondaful.cloud.common.security.UserSession;
import com.rondaful.cloud.seller.common.mws.intface.SubmitFeed;
import com.rondaful.cloud.seller.common.mws.model.SubmitFeedResponse;
import com.rondaful.cloud.seller.common.spring.ApplicationContextProvider;
import com.rondaful.cloud.seller.constants.AmazonConstants;
import com.rondaful.cloud.seller.entity.AmazonPublishListing;
import com.rondaful.cloud.seller.entity.AmazonPublishSubListing;
import com.rondaful.cloud.seller.entity.Empower;
import com.rondaful.cloud.seller.entity.amazon.AmazonPublishListStatus;
import com.rondaful.cloud.seller.entity.amazon.AmazonRequestProduct;
import com.rondaful.cloud.common.constant.marketplace.MarketplaceIdList;
import com.rondaful.cloud.seller.enums.ResponseCodeEnum;
import com.rondaful.cloud.seller.service.AmazonPublishListingService;
import com.rondaful.cloud.seller.service.AmazonPublishSubListingService;
import com.rondaful.cloud.seller.service.AuthorizationSellerService;

/**
 * 上报xml数据，并将返回的SubmitfeedId写入数据库。
 * @author ouxiangfeng
 *
 */
public class SubmitFeedTask  implements Runnable{

	private final Logger logger = LoggerFactory.getLogger(SubmitFeedTask.class);
	
	private Long sublistingId;
	public SubmitFeedTask(final Long sublistingId) {
		this.sublistingId = sublistingId;
	}
	
	@SuppressWarnings("unused")
	@Override
	public void run() {
		AmazonPublishSubListingService amazonPublishsubListingService  = (AmazonPublishSubListingService) ApplicationContextProvider.getBean("amazonPublishSubListingServiceImpl");
		AmazonPublishListingService amazonPublishListingService  = (AmazonPublishListingService) ApplicationContextProvider.getBean("amazonPublishListingServiceImpl");
		AuthorizationSellerService authorizationSellerService  = (AuthorizationSellerService) ApplicationContextProvider.getApplicationContext().getBean("authorizationSellerServiceImpl");
		 
		AmazonPublishSubListing amazonPublishSubListing =amazonPublishsubListingService.selectByPrimaryKey(sublistingId);
		AmazonPublishListing amazonPublishListing = amazonPublishListingService.selectByPrimaryKey(amazonPublishSubListing.getListingId());
		
		logger.debug("SubListing表找不到id为:{}",this.sublistingId);
		SubmitFeed submitFeed = (SubmitFeed) ApplicationContextProvider.getBean("submitFeed");
		if(amazonPublishSubListing == null)
		{
			logger.error("AmazonPublishSubListing表找不到id为:{} 的数据",this.sublistingId);
			return;
		}
		try {
			
		AmazonRequestProduct requestProduct = JSON.parseObject(amazonPublishListing.getPublishMessage(), AmazonRequestProduct.class);
		Empower empower = new Empower();
		empower.setStatus(1); 												// 正常授权
		empower.setWebName(MarketplaceIdList.createMarketplace().get(amazonPublishListing.getPublishSite()).getMarketplaceId()); 			//站点
		empower.setPlatform(2); 											// 平台 (1 ebay   2 amazon)
		empower.setThirdPartyName(requestProduct.getMerchantIdentifier());  // 卖家id
		logger.debug("empower query param>>:{}",JSON.toJSONString(empower));
		empower = authorizationSellerService.selectAmazonAccount(empower); // .findAllNoPage(empower) .selectOneByAcount(empower);
		if(empower == null)
		{
			amazonPublishSubListing.setResultMessage(String.format("在账户授权数据中，站点%s 找不到有效的授权数据sellerid：%s", 
					amazonPublishListing.getPublishSite(),requestProduct.getMerchantIdentifier()));
			amazonPublishSubListing.setCompleteStatus(AmazonConstants.COMPLETE_STATUS_FAILED);
			amazonPublishSubListing.setUpdateTime(new Date());
			amazonPublishsubListingService.update(amazonPublishSubListing);
			
			AmazonPublishListing mainUpdateObj = new AmazonPublishListing();
			mainUpdateObj.setId(amazonPublishListing.getId());
			mainUpdateObj.setUpdateTime(new Date());
			mainUpdateObj.setPublishStatus(AmazonPublishListStatus.AMAZON_PUBLISH_STATUS_FAIL);
			amazonPublishListingService.updateByPrimaryKey(mainUpdateObj);
			
			logger.error("在账户授权数据中，站点:{} 找不到有效的授权数据sellerid：{}   ",amazonPublishListing.getPublishSite(),amazonPublishListing.getPublishAccount());
			throw new GlobalException(ResponseCodeEnum.RETURN_CODE_100600, "未找到账户授权数据");
		}
		
		String xml = amazonPublishSubListing.getXmls();
		SubmitFeedResponse response = submitFeed.invoke(amazonPublishListing.getPublishSite(), 
				requestProduct.getMerchantIdentifier(), xml, amazonPublishSubListing.getMsgType(),empower.getToken());
		
		//AmazonPublishSubListing subUpdateObj = new AmazonPublishSubListing();
		AmazonPublishListing mainUpdateObj = new AmazonPublishListing();
		mainUpdateObj.setId(amazonPublishListing.getId());
		mainUpdateObj.setUpdateTime(new Date());
		
		if(response == null || AmazonConstants.RESPORT_RESULT_ERROR.equals(
				response.getSubmitFeedResult().getFeedSubmissionInfo().getFeedSubmissionId()))
		{
			amazonPublishSubListing.setResultMessage(response.getSubmitFeedResult().getFeedSubmissionInfo().getFeedType());
			amazonPublishSubListing.setCompleteStatus(AmazonConstants.COMPLETE_STATUS_FAILED);
			
			// 更新状态
			mainUpdateObj.setPublishStatus(AmazonPublishListStatus.AMAZON_PUBLISH_STATUS_FAIL);
			logger.error("请求amazon接口异常,原因:{}",response.getSubmitFeedResult().getFeedSubmissionInfo().getFeedType());
		}else
		{
			amazonPublishSubListing.setProcessStatus(response.getSubmitFeedResult().getFeedSubmissionInfo().getFeedProcessingStatus());
			amazonPublishSubListing.setSubmitfeedId(response.getSubmitFeedResult().getFeedSubmissionInfo().getFeedSubmissionId());
			amazonPublishSubListing.setCompleteStatus(AmazonConstants.COMPLETE_STATUS_PRESSING);
			amazonPublishSubListing.setResultMessage(AmazonConstants.RESPORT_RESULT_SUCCESS);
			
			// 更新状态
			mainUpdateObj.setPublishStatus(AmazonPublishListStatus.AMAZON_PUBLISH_STATUS_PUBLISHING);
		}
		logger.debug("更新amazonPublishSubListing");
		amazonPublishSubListing.setUpdateTime(new Date());
		amazonPublishSubListing.setCurrInterface("SubmitFeed");
		amazonPublishsubListingService.update(amazonPublishSubListing);
		
		// 更新状态到数据库
		logger.debug("更新amazonPublishListingService:{}",JSON.toJSONString(mainUpdateObj));
		amazonPublishListingService.updateByPrimaryKey(mainUpdateObj);
		} catch (NoSuchFieldException e) {
			logger.error("",e);
		} catch (IllegalAccessException e) {
			logger.error("",e);
		}
	}
}
